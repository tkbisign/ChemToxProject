# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.db import models
from django.contrib.auth.models import User

# Create your models here.

class target(models.Model):
	target_id = models.AutoField(primary_key=True)
	intended_target_gene_id = models.IntegerField();
	intended_target_entrez_gene_id = models.IntegerField();
	intended_target_official_full_name = models.CharField(max_length=255)
	intended_target_gene_name = models.CharField(max_length=255)
	intended_target_official_symbol = models.CharField(max_length=50)
	intended_target_gene_symbol = models.CharField(max_length=50)
	intended_target_description = models.CharField(max_length=255)
	intended_target_uniprot_accession_number = models.CharField(max_length=50)
	intended_target_organism_id = models.IntegerField();
	intended_target_track_status = models.CharField(max_length=50)
	technological_target_gene_id = models.IntegerField();
	technological_target_entrez_gene_id = models.IntegerField();
	technological_target_official_full_name = models.CharField(max_length=255)
	technological_target_gene_name = models.CharField(max_length=255)
	technological_target_official_symbol = models.CharField(max_length=50)
	technological_target_gene_symbol = models.CharField(max_length=50)
	technological_target_description = models.CharField(max_length=255)
	technological_target_uniprot_accession_number = models.CharField(max_length=50)
	technological_target_organism_id = models.IntegerField();
	technological_target_track_status = models.CharField(max_length=50)
	
class experiment(models.Model):
	aid = models.IntegerField()
	acid = models.IntegerField()
	aeid = models.AutoField(primary_key=True)
	asid = models.IntegerField()
	assay_source_name = models.CharField(max_length=50)
	assay_source_long_name = models.CharField(max_length=50)
	assay_source_desc = models.CharField(max_length=255)
	assay_name = models.CharField(max_length=50)
	assay_desc = models.CharField(max_length=255)
	timepoint_hr = models.IntegerField()
	organism_id = models.IntegerField()
	organism = models.CharField(max_length=50)
	tissue = models.CharField(max_length=50)
	cell_format = models.CharField(max_length=50)
	cell_free_component_source = models.CharField(max_length=50)
	cell_short_name = models.CharField(max_length=50)
	cell_growth_mode = models.CharField(max_length=50)
	assay_footprint = models.CharField(max_length=50)
	assay_format_type = models.CharField(max_length=50)
	assay_format_type_sub = models.CharField(max_length=50)
	content_readout_type = models.CharField(max_length=50)
	dilution_solvent = models.CharField(max_length=50)
	dilution_solvent_percent_max = models.FloatField()
	assay_component_name = models.CharField(max_length=50)
	assay_component_desc = models.CharField(max_length=255)
	assay_component_target_desc = models.CharField(max_length=255)
	parameter_readout_type = models.CharField(max_length=50)
	assay_design_type = models.CharField(max_length=50)
	assay_design_type_sub = models.CharField(max_length=50)
	biological_process_target = models.CharField(max_length=50)
	detection_technology_type = models.CharField(max_length=50)
	detection_technology_type_sub = models.CharField(max_length=50)
	detection_technology = models.CharField(max_length=50)
	signal_direction_type = models.CharField(max_length=50)
	key_assay_reagent_type = models.CharField(max_length=50)
	key_assay_reagent = models.CharField(max_length=50)
	technological_target_type = models.CharField(max_length=50)
	technological_target_type_sub = models.CharField(max_length=50)
	assay_component_endpoint_name = models.CharField(max_length=50)
	export_ready = models.BooleanField()
	internal_ready = models.BooleanField()
	assay_component_endpoint_desc = models.CharField(max_length=255)
	assay_function_type = models.CharField(max_length=50)
	normalized_data_type = models.CharField(max_length=50)
	analysis_direction = models.CharField(max_length=50)
	burst_assay = models.BooleanField()
	key_positive_control = models.CharField(max_length=50)
	signal_direction = models.CharField(max_length=50)
	intended_target_type = models.CharField(max_length=50)
	intended_target_type_sub = models.CharField(max_length=50)
	intended_target_family = models.CharField(max_length=50)
	intended_target_family_sub = models.CharField(max_length=50)
	fit_all = models.BooleanField()
	reagent_arid = models.CharField(max_length=50)
	reagent_reagent_name_value = models.CharField(max_length=255)
	reagent_reagent_name_value_type = models.CharField(max_length=255)
	reagent_culture_or_assay = models.CharField(max_length=255)

class citation(models.Model):
	citation_id = models.IntegerField(primary_key=True)
	pmid = models.IntegerField(null=True)
	doi = models.CharField(max_length=50)
	other_source = models.CharField(max_length=50)
	other_id = models.CharField(max_length=50)
	citation = models.CharField(max_length=255)
	title = models.CharField(max_length=255)
	author = models.CharField(max_length=255)
	url = models.CharField(max_length=50)

class experiment_citation_relation(models.Model):
	id = models.AutoField(primary_key=True)
	aeid = models.ForeignKey(experiment, on_delete=models.CASCADE, db_column = 'aeid')	
	citation_id = models.ForeignKey(citation, on_delete=models.CASCADE, db_column = 'citation_id')
	pmid = models.IntegerField(null=True)
	
class experiment_target_relation(models.Model):
	id = models.AutoField(primary_key=True)
	aeid = models.ForeignKey(experiment, on_delete=models.CASCADE, db_column = 'aeid')
	target_id = models.ForeignKey(target, on_delete=models.CASCADE, db_column = 'target_id')

"""class toxicity(models.Model):
	m4id = models.AutoField(primary_key=True)
	m5id = models.IntegerField()
	spid = models.CharField(max_length=50)
	stkc = models.IntegerField()
	stkc_unit = models.CharField(max_length=50)
	tested_conc_unit = models.CharField(max_length=50)
	spid_legacy = models.CharField(max_length=50)
	chid = models.IntegerField()
	casn = models.CharField(max_length=50)
	chnm = models.CharField(max_length=50)
	code = models.CharField(max_length=50)
	aeid = models.IntegerField()
	aenm = models.CharField(max_length=50)
	resp_unit = models.CharField(max_length=50)
	nconc = models.IntegerField()
	npts = models.IntegerField()
	nrep = models.IntegerField()
	nmed_gtbl = models.IntegerField()
	hitc = models.IntegerField()
	modl = models.CharField(max_length=50)
	fitc = models.IntegerField()
	coff = models.FloatField()
	bmad = models.FloatField()
	gsid_rep = models.IntegerField()
	chit = models.CharField(max_length=50)
	flag_ids = models.IntegerField()
	flags = models.CharField(max_length=50)
	resp_max = models.FloatField()
	resp_min = models.FloatField()
	max_mean = models.FloatField()
	max_mean_conc = models.FloatField()
	max_med = models.FloatField()
	max_med_conc = models.FloatField()
	logc_max = models.FloatField()
	logc_min = models.FloatField()
	actp = models.FloatField()
	modl_er = models.FloatField()
	modl_tp = models.FloatField()
	modl_ga = models.FloatField()
	modl_gw = models.FloatField()
	modl_la = models.FloatField()
	modl_lw = models.FloatField()
	modl_rmse = models.FloatField()
	modl_prob = models.FloatField()
	modl_acc = models.FloatField()
	modl_acb = models.FloatField()
	cnst = models.IntegerField()
	hill = models.IntegerField()
	hcov = models.IntegerField()
	gnls = models.IntegerField()
	gcov = models.IntegerField()
	cnst_er = models.FloatField()
	cnst_aic = models.FloatField()
	cnst_rmse = models.FloatField()
	cnst_prob = models.CharField(max_length=50)
	hill_tp = models.FloatField()
	hill_tp_sd = models.FloatField()
	hill_ga = models.FloatField()
	hill_ga_sd = models.FloatField()
	hill_gw = models.FloatField()
	hill_gw_sd = models.FloatField()
	hill_er = models.FloatField()
	hill_er_sd = models.FloatField()
	hill_aic = models.FloatField()
	hill_rmse = models.FloatField()
	hill_prob = models.FloatField()
	gnls_tp = models.FloatField()
	gnls_tp_sd = models.FloatField()
	gnls_ga = models.FloatField()
	gnls_ga_sd = models.FloatField()
	gnls_gw = models.FloatField()
	gnls_gw_sd = models.FloatField()
	gnls_la = models.FloatField()
	gnls_la_sd = models.FloatField()
	gnls_lw = models.FloatField()
	gnls_lw_sd = models.FloatField()
	gnls_er = models.FloatField()
	gnls_er_sd = models.FloatField()
	gnls_aic = models.FloatField()
	gnls_rmse = models.FloatField()
	gnls_prob = models.FloatField()"""

"""class chemicals(models.Model):
	cid = models.AutoField(primary_key=True)
	sid = models.IntegerField()
	casn = models.IntegerField()
	name = models.CharField(max_length=50)
	name_synonyms = models.CharField(max_length=50)
	description = models.CharField(max_length=200)
	formula = models.IntegerField()
	mw = models.IntegerField()
	IUPAC = models.CharField(max_length=50)
	SMILES = models.CharField(max_length=50)
	PubChemFP = models.CharField(max_length=50)"""
